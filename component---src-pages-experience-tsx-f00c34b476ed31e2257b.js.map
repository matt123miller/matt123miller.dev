{"version":3,"file":"component---src-pages-experience-tsx-f00c34b476ed31e2257b.js","mappings":"qJAUA,IAJmC,SAAC,GAAD,IAAGA,EAAH,EAAGA,OAAH,OACjC,uBAAKC,UAAS,mBAAoBD,GAAU,e,4CCuB9C,IAlBsC,SAAC,GAAD,IAAGE,EAAH,EAAGA,MAAOF,EAAV,EAAUA,OAAQG,EAAlB,EAAkBA,SAAlB,OACpC,uBAAKF,UAAU,wBACZE,GACC,sBAAIF,UAAS,6BAA8BD,GAAU,gBAClDG,GAGL,sBACEF,UAAS,sDACPD,GAAU,gBAGXE,GAEH,gBAAC,IAAD,CAAWF,OAAQA,O,mCCXvB,IATmB,SAAC,GAAD,IAAGI,EAAH,EAAGA,QAAH,OACjB,uBACEH,UAAU,qCACVI,wBAAyB,CACvBC,OAAQF,O,8GCsBd,EAtBkC,SAAC,GAAD,IAChCF,EADgC,EAChCA,MACAC,EAFgC,EAEhCA,SACAC,EAHgC,EAGhCA,QACAG,EAJgC,EAIhCA,UACAC,EALgC,EAKhCA,QALgC,OAOhC,uBAAKP,UAAU,wBACb,wBAAMA,UAAU,UAChB,uBAAKA,UAAU,mBACb,sBAAIA,UAAU,iBAAiBC,GAC/B,sBAAID,UAAU,4BACd,yBAAIE,GACJ,yBACGI,EADH,MACiBC,GAEjB,sBAAIP,UAAU,6BAEhB,uBAAKA,UAAU,gCAAgCG,K,6BCqDnD,EA1D6B,WAC3B,OAA8CK,EAAAA,EAAAA,gBAAe,cAArDC,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,kBA4BlBC,EAA6BF,EAAeG,YAC5CC,EAA4BH,EAAkBI,MAEpD,OACE,gBAACC,EAAA,EAAD,CAAWC,SAAO,GAChB,gBAACC,EAAA,EAAD,CAAchB,MAAOU,EAAaV,QAEjCY,EAAYK,KAAI,SAACC,GAChB,MAIIA,EAAKC,KAHPC,EADF,EACEA,GACAC,EAFF,EAEEA,KAFF,IAGEV,YAAeW,EAHjB,EAGiBA,QAASC,EAH1B,EAG0BA,SAAUlB,EAHpC,EAGoCA,UAAWC,EAH/C,EAG+CA,QAG/C,OACE,gBAAC,EAAD,CACEkB,IAAKJ,EACLpB,MAAOsB,EACPrB,SAAUsB,EACVrB,QAAS,gBAACuB,EAAA,EAAD,CAAYvB,QAASmB,IAC9BhB,UAAWA,EACXC,QAASA,SCQrB,EA1D4B,WAC1B,OAA8CC,EAAAA,EAAAA,gBAAe,cAArDC,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,kBA4BlBC,EAA6BF,EAAeG,YAC5Ce,EAAyBjB,EAAkBI,MAEjD,OACE,gBAACC,EAAA,EAAD,CAAWC,SAAO,GAChB,gBAACC,EAAA,EAAD,CAAchB,MAAOU,EAAaV,QAEjC0B,EAAUT,KAAI,SAACC,GACd,MAIIA,EAAKC,KAHPC,EADF,EACEA,GACAC,EAFF,EAEEA,KAFF,IAGEV,YAAegB,EAHjB,EAGiBA,WAAYC,EAH7B,EAG6BA,OAAQvB,EAHrC,EAGqCA,UAAWC,EAHhD,EAGgDA,QAGhD,OACE,gBAAC,EAAD,CACEkB,IAAKJ,EACLpB,MAAO2B,EACP1B,SAAU2B,EACV1B,QAAS,gBAACuB,EAAA,EAAD,CAAYvB,QAASmB,IAC9BhB,UAAWA,EACXC,QAASA,SC1DrB,EAR6B,kBAC3B,gBAACuB,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAK9B,MAAM,YACX,gBAAC,EAAD,MACA,gBAAC,EAAD","sources":["webpack://matt123miller.github.io/./src/components/Separator/index.tsx","webpack://matt123miller.github.io/./src/components/TitleSection/index.tsx","webpack://matt123miller.github.io/./src/components/utils/FormatHtml/index.tsx","webpack://matt123miller.github.io/./src/components/Timeline/index.tsx","webpack://matt123miller.github.io/./src/components/Experience/index.tsx","webpack://matt123miller.github.io/./src/components/Education/index.tsx","webpack://matt123miller.github.io/./src/pages/experience.tsx"],"sourcesContent":["import React from 'react';\n\ninterface Props {\n  center?: Boolean;\n}\n\nconst Separator: React.FC<Props> = ({ center }) => (\n  <div className={`separator-icon ${center && 'mx-auto'}`} />\n);\n\nexport default Separator;\n","import React from 'react';\n\nimport Separator from 'components/Separator';\n\ntype Props = {\n  title: string;\n  center?: Boolean;\n  subtitle?: string;\n};\n\n// It would be nice if I could decide what heading type to use inside as the main heading.\n// Pass children? Export different heading types? Pass an arg?\nconst TitleSection: React.FC<Props> = ({ title, center, subtitle }) => (\n  <div className=\"flex flex-col w-full\">\n    {subtitle && (\n      <h4 className={`text-xs w-full text-left ${center && 'text-center'}`}>\n        {subtitle}\n      </h4>\n    )}\n    <h2\n      className={`uppercase mb-4 text-lg font-bold w-full text-left ${\n        center && 'text-center'\n      }`}\n    >\n      {title}\n    </h2>\n    <Separator center={center} />\n  </div>\n);\n\nexport default TitleSection;\n","import React, { ReactNode } from 'react';\n\ninterface Props {\n  content: string;\n}\n\nconst FormatHtml = ({ content }: Props) => (\n  <div\n    className=\"format-html text-content-container\"\n    dangerouslySetInnerHTML={{\n      __html: content,\n    }}\n  />\n);\n\nexport default FormatHtml;\n","import React from 'react';\n\ninterface Props {\n  title: string;\n  subtitle: string;\n  content: React.ReactNode;\n  startDate: string;\n  endDate: string;\n}\n\nconst Timeline: React.FC<Props> = ({\n  title,\n  subtitle,\n  content,\n  startDate,\n  endDate,\n}) => (\n  <div className=\"timeline sm:flex-row\">\n    <span className=\"point\" />\n    <div className=\"w-full sm:w-1/3\">\n      <h2 className=\"font-semibold\">{title}</h2>\n      <hr className=\"hidden sm:block sm:mr-4\" />\n      <p>{subtitle}</p>\n      <p>\n        {startDate} - {endDate}\n      </p>\n      <hr className=\"block sm:hidden sm:mr-4\" />\n    </div>\n    <div className=\"w-full sm:w-2/3 mt-4 sm:mt-0\">{content}</div>\n  </div>\n);\n\nexport default Timeline;\n","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Timeline from 'components/Timeline';\nimport Container from 'components/Container';\nimport TitleSection from 'components/TitleSection';\nimport FormatHtml from 'components/utils/FormatHtml';\n\nimport { SectionTitle } from 'helpers/definitions';\n\ninterface Experience {\n  node: {\n    id: string;\n    html: React.ReactNode;\n    frontmatter: {\n      company: string;\n      position: string;\n      startDate: string;\n      endDate: string;\n    };\n  };\n}\n\nconst Experience: React.FC = () => {\n  const { markdownRemark, allMarkdownRemark } = useStaticQuery(graphql`\n    query {\n      markdownRemark(frontmatter: { category: { eq: \"experiences section\" } }) {\n        frontmatter {\n          title\n          subtitle\n        }\n      }\n      allMarkdownRemark(\n        filter: { frontmatter: { category: { eq: \"experiences\" } } }\n        sort: { order: DESC, fields: fileAbsolutePath }\n      ) {\n        edges {\n          node {\n            id\n            html\n            frontmatter {\n              company\n              position\n              startDate\n              endDate\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const sectionTitle: SectionTitle = markdownRemark.frontmatter;\n  const experiences: Experience[] = allMarkdownRemark.edges;\n\n  return (\n    <Container section>\n      <TitleSection title={sectionTitle.title}/>\n\n      {experiences.map((item) => {\n        const {\n          id,\n          html,\n          frontmatter: { company, position, startDate, endDate }\n        } = item.node;\n\n        return (\n          <Timeline\n            key={id}\n            title={company}\n            subtitle={position}\n            content={<FormatHtml content={html} />}\n            startDate={startDate}\n            endDate={endDate}\n          />\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default Experience;\n","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Timeline from 'components/Timeline';\nimport Container from 'components/Container';\nimport TitleSection from 'components/TitleSection';\nimport FormatHtml from 'components/utils/FormatHtml';\n\nimport { SectionTitle } from 'helpers/definitions';\n\ninterface Education {\n  node: {\n    id: string;\n    html: React.ReactNode;\n    frontmatter: {\n      university: string;\n      degree: string;\n      startDate: string;\n      endDate: string;\n    };\n  };\n}\n\nconst Education: React.FC = () => {\n  const { markdownRemark, allMarkdownRemark } = useStaticQuery(graphql`\n    query {\n      markdownRemark(frontmatter: { category: { eq: \"education section\" } }) {\n        frontmatter {\n          title\n          subtitle\n        }\n      }\n      allMarkdownRemark(\n        filter: { frontmatter: { category: { eq: \"education\" } } }\n        sort: { order: DESC, fields: fileAbsolutePath }\n      ) {\n        edges {\n          node {\n            id\n            html\n            frontmatter {\n              university\n              degree\n              startDate\n              endDate\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const sectionTitle: SectionTitle = markdownRemark.frontmatter;\n  const education: Education[] = allMarkdownRemark.edges;\n\n  return (\n    <Container section>\n      <TitleSection title={sectionTitle.title} />\n\n      {education.map((item) => {\n        const {\n          id,\n          html,\n          frontmatter: { university, degree, startDate, endDate }\n        } = item.node;\n\n        return (\n          <Timeline\n            key={id}\n            title={university}\n            subtitle={degree}\n            content={<FormatHtml content={html} />}\n            startDate={startDate}\n            endDate={endDate}\n          />\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default Education;\n","import React from 'react';\n\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport Experience from 'components/Experience';\nimport Education from 'components/Education';\n\nconst MyWorkPage: React.FC = () => (\n  <Layout>\n    <SEO title=\"My Work\" />\n    <Experience />\n    <Education />\n  </Layout>\n);\n\nexport default MyWorkPage;\n"],"names":["center","className","title","subtitle","content","dangerouslySetInnerHTML","__html","startDate","endDate","useStaticQuery","markdownRemark","allMarkdownRemark","sectionTitle","frontmatter","experiences","edges","Container","section","TitleSection","map","item","node","id","html","company","position","key","FormatHtml","education","university","degree","Layout","SEO"],"sourceRoot":""}