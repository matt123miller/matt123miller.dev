{"version":3,"file":"component---src-templates-blog-post-index-tsx-363c965ec41524f4608f.js","mappings":"qJAUA,IAJmC,SAAC,GAAD,IAAGA,EAAH,EAAGA,OAAH,OACjC,uBAAKC,UAAS,mBAAoBD,GAAU,e,mCCQ9C,IATmB,SAAC,GAAD,IAAGE,EAAH,EAAGA,QAAH,OACjB,uBACED,UAAU,qCACVE,wBAAyB,CACvBC,OAAQF,O,kICUd,EAVqB,SAAC,GAAD,IAAGG,EAAH,EAAGA,MAAH,OACnB,uBAAKJ,UAAU,wBACb,sBAAIA,UAAU,wDACXI,GAGH,gBAACC,EAAA,EAAD,CAAWN,QAAM,M,UCoErB,EA1CiB,SAAC,GAAkC,IAAhCO,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,YAClBC,EAAOF,EAAKG,eACVC,EAAmBH,EAAnBG,SAAUC,EAASJ,EAATI,KAIlB,OAFAC,QAAQC,IAAIL,GAGV,gBAACM,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAKX,MAAOI,EAAKQ,YAAYZ,QAC7B,gBAACa,EAAA,EAAD,CAAWC,SAAO,GAChB,gBAACC,EAAD,CAAWf,MAAOI,EAAKQ,YAAYZ,QAKnC,gBAACgB,EAAA,EAAD,CAAYnB,QAASO,EAAKa,OAE1B,uBAAKrB,UAAU,qCACb,4BACGU,GACC,gBAAC,EAAAY,KAAD,CACEC,GAAIb,EAASc,OAAOC,KACpBC,IAAI,WACJ1B,UAAU,iBAHZ,KAKKU,EAASM,YAAYZ,QAI9B,4BACGO,GACC,gBAAC,EAAAW,KAAD,CAAMC,GAAIZ,EAAKa,OAAOC,KAAMC,IAAI,OAAO1B,UAAU,iBAC9CW,EAAKK,YAAYZ,MADpB","sources":["webpack://matt123miller.github.io/./src/components/Separator/index.tsx","webpack://matt123miller.github.io/./src/components/utils/FormatHtml/index.tsx","webpack://matt123miller.github.io/./src/components/BlogTitle/index.tsx","webpack://matt123miller.github.io/./src/templates/BlogPost/index.tsx"],"sourcesContent":["import React from 'react';\n\ninterface Props {\n  center?: Boolean;\n}\n\nconst Separator: React.FC<Props> = ({ center }) => (\n  <div className={`separator-icon ${center && 'mx-auto'}`} />\n);\n\nexport default Separator;\n","import React, { ReactNode } from 'react';\n\ninterface Props {\n  content: string;\n}\n\nconst FormatHtml = ({ content }: Props) => (\n  <div\n    className=\"format-html text-content-container\"\n    dangerouslySetInnerHTML={{\n      __html: content,\n    }}\n  />\n);\n\nexport default FormatHtml;\n","import React from 'react';\n\nimport Separator from 'components/Separator';\n\ntype Props = {\n  title: string;\n};\n\n// It would be nice if I could decide what heading type to use inside as the main heading.\n// Pass children? Export different heading types? Pass an arg?\nconst TitleSection = ({ title }: Props) => (\n  <div className=\"flex flex-col w-full\">\n    <h1 className=\"uppercase mb-4 text-2xl font-bold w-full text-center\">\n      {title}\n    </h1>\n\n    <Separator center />\n  </div>\n);\n\nexport default TitleSection;\n","import React from 'react';\nimport { graphql, Link } from 'gatsby';\nimport Img from 'gatsby-image';\n\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport Container from 'components/Container';\nimport BlogTitle from 'components/BlogTitle';\nimport FormatHtml from 'components/utils/FormatHtml';\nimport { ImageSharpFluid } from 'helpers/definitions';\n\n// import 'assets/styles/dnd.css';\n\ninterface Post {\n  html: string;\n  fields: {\n    slug: string;\n  };\n  frontmatter: {\n    title: string;\n    date: string;\n    cover: {\n      childImageSharp: {\n        fluid: ImageSharpFluid;\n      };\n    };\n    coverAlt: string;\n    tags: string[];\n  };\n}\n\ninterface Props {\n  data: {\n    markdownRemark: Post;\n  };\n  pageContext: {\n    slug: string;\n    next: Post;\n    previous: Post;\n  };\n}\n\nconst BlogPost = ({ data, pageContext }: Props) => {\n  const post = data.markdownRemark;\n  const { previous, next } = pageContext;\n\n  console.log(post);\n\n  return (\n    <Layout>\n      <SEO title={post.frontmatter.title} />\n      <Container section>\n        <BlogTitle title={post.frontmatter.title} />\n        {/* <Img\n          fluid={post.frontmatter.cover.childImageSharp.fluid}\n          alt={post.frontmatter.coverAlt}\n        /> */}\n        <FormatHtml content={post.html} />\n        {/* Extract following */}\n        <div className=\"w-full flex justify-between mt-10\">\n          <span>\n            {previous && (\n              <Link\n                to={previous.fields.slug}\n                rel=\"previous\"\n                className=\"animated-link\"\n              >\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </span>\n          <span>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\" className=\"animated-link\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </span>\n        </div>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default BlogPost;\n\nexport const query = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMM DD, YYYY\")\n        description\n        tags\n        cover {\n          childImageSharp {\n            fluid(maxHeight: 600, maxWidth: 800) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        coverAlt\n      }\n    }\n  }\n`;\n"],"names":["center","className","content","dangerouslySetInnerHTML","__html","title","Separator","data","pageContext","post","markdownRemark","previous","next","console","log","Layout","SEO","frontmatter","Container","section","BlogTitle","FormatHtml","html","Link","to","fields","slug","rel"],"sourceRoot":""}