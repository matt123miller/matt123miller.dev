{"version":3,"file":"component---src-pages-blog-tsx-6d04a2b241124650d7ca.js","mappings":"+JAkCA,IAxBiB,SAAC,GAAiD,IAA/CA,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAC5C,OAAID,EAEA,gBAAC,EAAAE,KAAD,CAAMC,GAAIL,GACR,uBAAKM,UAAS,sBAAuBH,EAAS,eAAiB,KAC5DF,IAOP,qBAAGK,UAAU,OAAOC,KAAMP,EAAMQ,IAAI,sBAAsBC,OAAO,UAC/D,uBAAKH,UAAS,sBAAuBH,EAAS,eAAiB,KAC5DF,M,mCCdT,IAJmC,SAAC,GAAD,IAAGE,EAAH,EAAGA,OAAH,OACjC,uBAAKG,UAAS,mBAAoBH,GAAU,e,4CCuB9C,IAlBsC,SAAC,GAAD,IAAGO,EAAH,EAAGA,MAAOP,EAAV,EAAUA,OAAQQ,EAAlB,EAAkBA,SAAlB,OACpC,uBAAKL,UAAU,wBACZK,GACC,sBAAIL,UAAS,6BAA8BH,GAAU,gBAClDQ,GAGL,sBACEL,UAAS,sDACPH,GAAU,gBAGXO,GAEH,gBAAC,IAAD,CAAWP,OAAQA,O,qJCyDjBS,EAAW,aAyCjB,EA9FwB,WACtB,OAA8CC,EAAAA,EAAAA,gBAAeD,GAArDE,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,kBAGlBC,GAD6BF,EAAeG,YAC5BF,EAAkBG,OAExC,OACE,gBAACC,EAAA,EAAD,CAAWC,SAAO,GAChB,gBAACC,EAAA,EAAD,CAAcX,MAAM,OAAOP,QAAM,IACjC,uBAAKG,UAAU,yBAIZU,EAAMM,KAAI,SAACC,GACV,MAIIA,EAAKC,KAHPC,EADF,EACEA,GACUC,EAFZ,EAEEC,OAAUD,KAFZ,IAGET,YAAeP,EAHjB,EAGiBA,MAAOkB,EAHxB,EAGwBA,MAAOC,EAH/B,EAG+BA,YAAmBC,GAHlD,EAG4CC,KAH5C,EAGkDD,MAGlD,OACE,uBAAKxB,UAAU,sBAAsB0B,IAAKP,GACxC,gBAACQ,EAAA,EAAD,CAAUjC,KAAM0B,EAAMxB,UAAQ,EAACC,QAAM,GACnC,0BAAQG,UAAU,UAChB,gBAAC,IAAD,CACEA,UAAU,qBACV4B,MAAON,EAAMO,gBAAgBD,MAC7BE,IAAK1B,KAGT,uBAAKJ,UAAU,OACb,sBAAIA,UAAU,sBAAsBI,GACpC,yBAAImB,IAEN,uBAAKvB,UAAU,oBACZwB,EAAKR,KAAI,SAACe,GAAD,OACR,wBACE/B,UAAU,sCACV0B,IAAKK,GAEJA,eCzDvB,EAP2B,kBACzB,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAK7B,MAAM,SACX,gBAAC,EAAD","sources":["webpack://matt123miller.github.io/./src/components/LinkCard/index.tsx","webpack://matt123miller.github.io/./src/components/Separator/index.tsx","webpack://matt123miller.github.io/./src/components/TitleSection/index.tsx","webpack://matt123miller.github.io/./src/components/Posts/index.tsx","webpack://matt123miller.github.io/./src/pages/blog.tsx"],"sourcesContent":["import React, { ReactChildren } from 'react';\nimport { Link } from 'gatsby';\n\ninterface Props {\n  link: string;\n  internal?: Boolean;\n  center?: Boolean;\n  children?: any;\n}\n\nconst LinkCard = ({ link, children, internal, center }: Props) => {\n  if (internal) {\n    return (\n      <Link to={link}>\n        <div className={`link-card-content ${center ? 'items-center' : ''}`}>\n          {children}\n        </div>\n      </Link>\n    );\n  }\n\n  return (\n    <a className=\"mr-2\" href={link} rel=\"noreferrer noopener\" target=\"_blank\">\n      <div className={`link-card-content ${center ? 'items-center' : ''}`}>\n        {children}\n      </div>\n    </a>\n  );\n};\n\nconst InternalLink = () => {};\n\nconst ExternalLink = () => {};\n\nexport default LinkCard;\n","import React from 'react';\n\ninterface Props {\n  center?: Boolean;\n}\n\nconst Separator: React.FC<Props> = ({ center }) => (\n  <div className={`separator-icon ${center && 'mx-auto'}`} />\n);\n\nexport default Separator;\n","import React from 'react';\n\nimport Separator from 'components/Separator';\n\ntype Props = {\n  title: string;\n  center?: Boolean;\n  subtitle?: string;\n};\n\n// It would be nice if I could decide what heading type to use inside as the main heading.\n// Pass children? Export different heading types? Pass an arg?\nconst TitleSection: React.FC<Props> = ({ title, center, subtitle }) => (\n  <div className=\"flex flex-col w-full\">\n    {subtitle && (\n      <h4 className={`text-xs w-full text-left ${center && 'text-center'}`}>\n        {subtitle}\n      </h4>\n    )}\n    <h2\n      className={`uppercase mb-4 text-lg font-bold w-full text-left ${\n        center && 'text-center'\n      }`}\n    >\n      {title}\n    </h2>\n    <Separator center={center} />\n  </div>\n);\n\nexport default TitleSection;\n","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport Img from 'gatsby-image';\n\nimport Container from 'components/Container';\nimport TitleSection from 'components/TitleSection';\nimport LinkCard from 'components/LinkCard';\nimport { blogTags } from 'data/Constants';\nimport { SectionTitle, ImageSharpFluid } from 'helpers/definitions';\n\ninterface Post {\n  node: {\n    id: string;\n    fields: {\n      slug: string;\n    };\n    frontmatter: {\n      title: string;\n      description: string;\n      date: string;\n      tags: string[];\n      cover: {\n        childImageSharp: {\n          fluid: ImageSharpFluid;\n        };\n      };\n    };\n  };\n}\n\nconst Posts: React.FC = () => {\n  const { markdownRemark, allMarkdownRemark } = useStaticQuery(gatsbyQuery);\n\n  const sectionTitle: SectionTitle = markdownRemark.frontmatter;\n  const posts: Post[] = allMarkdownRemark.edges;\n\n  return (\n    <Container section>\n      <TitleSection title=\"BLOG\" center />\n      <div className=\"w-full flex flex-wrap\">\n        {/* {blogTags.map((t) => {\n          // What do I do with the tags?\n        })} */}\n        {posts.map((item) => {\n          const {\n            id,\n            fields: { slug },\n            frontmatter: { title, cover, description, date, tags },\n          } = item.node;\n\n          return (\n            <div className=\"w-full sm:w-1/2 p-3\" key={id}>\n              <LinkCard link={slug} internal center>\n                <figure className=\"w-full\">\n                  <Img\n                    className=\"blog-preview-image\"\n                    fluid={cover.childImageSharp.fluid}\n                    alt={title}\n                  />\n                </figure>\n                <div className=\"p-4\">\n                  <h3 className=\"font-semibold mb-4\">{title}</h3>\n                  <p>{description}</p>\n                </div>\n                <div className=\"p-4 pt-2 mt-auto\">\n                  {tags.map((tag) => (\n                    <span\n                      className=\"text-xs rounded-full px-2 py-1 mr-2\"\n                      key={tag}\n                    >\n                      {tag}\n                    </span>\n                  ))}\n                </div>\n              </LinkCard>\n            </div>\n          );\n        })}\n      </div>\n    </Container>\n  );\n};\n\nconst gatsbyQuery = graphql`\n  query {\n    markdownRemark(frontmatter: { category: { eq: \"blog section\" } }) {\n      frontmatter {\n        title\n        subtitle\n      }\n    }\n    allMarkdownRemark(\n      filter: {\n        frontmatter: { category: { eq: \"blog\" }, published: { eq: true } }\n      }\n      sort: { fields: frontmatter___date, order: DESC }\n    ) {\n      edges {\n        node {\n          id\n          html\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            description\n            date(formatString: \"MMM DD, YYYY\")\n            tags\n            cover {\n              childImageSharp {\n                fluid(maxHeight: 600, maxWidth: 800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            coverAlt\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Posts;\n","import React from 'react';\n\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport Posts from 'components/Posts';\n\nconst BlogPage: React.FC = () => (\n  <Layout>\n    <SEO title=\"Blog\" />\n    <Posts />\n  </Layout>\n);\n\nexport default BlogPage;\n"],"names":["link","children","internal","center","Link","to","className","href","rel","target","title","subtitle","gatsbyQuery","useStaticQuery","markdownRemark","allMarkdownRemark","posts","frontmatter","edges","Container","section","TitleSection","map","item","node","id","slug","fields","cover","description","tags","date","key","LinkCard","fluid","childImageSharp","alt","tag","Layout","SEO"],"sourceRoot":""}